; TODO: this might do somethign useful?
@def parse := (p input index){ p(input index) }

@def result := (vals index){ ok([vals index]) }
@def fail := (err index){ error([err index]) }

@def never := (_ i){ fail(#never-matches i) }
@def always := (value){ (_ i){ result(value i) } }

@def ^ := (_ i){
    i.==(0).cond({
        result([] i)
    } {
        fail(#expected-start-of-input i)
    })
}

@def $ := (input i){
    input.length.==(i).cond({
        result([] i)
    } {
        fail(#expected-end-of-input i)
    })
}

@def ++ := (x){ JS::+(x 1) }

@def -- := (x){ JS::-(x 1) }

@def any := (input i){
    input.get(i).cond((value){
        result([value] i.++)
    } {
        fail(#unexpected-end-of-input i)
    })
}

@def match := (matcher){ (input i){
    @try [[val] i] := any(input i)
    matcher(val).cond({
        result([val] i)
    } {
        fail(#no-match i.--)
    })
} }

@def eq := (value){ match((x){ x.==(value) }) }

; alt
@def | := (l r){ (input i){
    l.parse(input i).else({ r.parse(input i) })
} }

@def seq := (l r){ (input i){
    @try [val1 i1] := l.parse(input i)
    @try [val2 i2] := r.parse(input i1)
    result([val1 val2] i2)
} }

; match 0 or more
@def * := (p){ (input init-i){
    loop::run([[] init-i] ([coll i]){
        p.parse(input i)
            .cond(([val next-i]){
                @do assert(
                    i.!=(next-i)
                    "`*` cannot be used with a parser that does not consume input"
                )
                loop::recur([coll.concat(val) next-i])
            } {
                loop::done(result(coll i))
            })
    })
} }

; match 1 or more
@def + := (p){ p.seq(p.*) }

@def _nothing := always([])

; match 0 or 1
@def ? := (p){ p.|(_nothing) }

; match if p does not match; does not consume input
@def ~ := (p){ (input i){
    p.parse(input i).cond({
        fail(#should-not-match i)
    } {
        result([] i)
    })
} }

@def code-point-at := (str index){
    JS::apply(str::codePointAt [index] this: str)
}
@def range := (start end){
    @let start-code := start.code-point-at(0)
    @let end-code :=  end.code-point-at(0)
    match((value){
        @let c := value.code-point-at(0)
        start-code.<=(c).<=(end-code)
    })
}

@def digit := range("0" "9")
@def uppercase := range(#A #Z)
@def lowercase := range(#a #z)
@def letter := uppercase.|(lowercase)

@def space := " "
@def tab := "   "
@def newline := "
"

@def whitespace := eq(space).|(eq(tab)).|(eq(newline))
