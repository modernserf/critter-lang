@def die := (message){ JS::throw(message) }

@def id := (x){ x }

; equality & comparison
; critter APIs doesn't use boolean values,
; instead, it extensively uses [#ok value] [#err error]
; with pattern matching

; TODO: identify ok/error with Either prototype, not tag

@def ok := (value){ [#ok value] }
@def error := (err){ [#err err] }
@def tag := (m){ m::0 }
@def unwrap := (m){ m::1 }
@def bool? := (bool if-true if-false){
    JS::?(bool ok(if-true) error(if-false))
}

@def get := (record key){
    JS::in(key record).bool?(record.JS::get(key) #undefined)
}
; combine l and r into a single record, with r's fields taking precedence
@def assign := (l r){
    JS::apply(JS::Object::assign [[] l r])
}

; return copy of record with key set to value
@def assoc := (record key value){
    assign(record JS::set-prop([] key value))
}

@def ref-equal? := (l r){
    JS::===(l r).bool?(l error(#not-equal))
}

; Either a b , (a -> Either c d) , (b -> Either c d) -> Either c d
@def cond := (maybe if-ok if-err){
    @let f := JS::===(maybe.tag #ok)
        .JS::?(if-ok if-err)
    f(maybe.unwrap)
}

@def then := (m if-ok){ m.cond(if-ok error) }
@def else := (m if-err){ m.cond(ok if-err) }
@def or := (l r){ l.else({ r }) }
@def and := (l r){ l.then({ r }) }

; not swaps the ok & error tags
@def not := (x){ x.cond(error ok) }

@def record? := (r){
    and(
        not(ref-equal?(r JS::null))
        ref-equal?(JS::typeof(r) #object)
    ).then({ ok(r) })
}

; wrap m in #ok if its not already wrapped
@def flat-ok := (m){
    @let inner := {
        @then m.record?
        @then key := m.get(0)
        ref-equal?(key #ok).or(ref-equal?(key #err))
    }

    inner().cond({ m } { ok(m) })
}

; control flow (use as `@do` `@try` `@guard`)
; crash if m is error
@def do := (m next){ m.cond(next die) }
; block returns err if m is error
@def try := (m next){ m.then((x){ x.next.flat-ok }) }
; block returns ok if m is not error
@def guard := (m next){ m.else((x){ x.next.flat-ok }) }

@def keys := (r){ JS::apply(JS::global::Object::keys [r]) }

@def fold := (record reducer init){
    @let arr := JS::apply(JS::global::Object::values [record])
    JS::apply(arr::reduce [JS::fn(reducer) init] this: arr)
}

; monadic fold
@def chain := (record reducer init){
    record.fold((ch value){
        ch.then((ch-value){ reducer(ch-value value) })
    } init)
}

; structural equality
@def == := (l r){
    ; both are equal primitives, or
    @else ref-equal?(l r)
    ; both are records
    @then l.record?
    @then r.record?

    ; for each l key, if r has key, recur over l[key] == r[key]
    @then l.keys.chain((_ key){
        @then lval := l.get(key)
        @then rval := r.get(key)
        ==(lval rval)
    } ok(#init))


    ; verify l has key (they have already been compared)
    @then r.keys.chain((_ key){ l.get(key) } ok(#init))

    ok(l)
}

@def != := (l r){ not(==(l r)) }

@def assert := (m message){ m.else({ die(message) }) }

; goal generators (aka parser combinators!)

@def never := { error(#no-match) }
@def always := (f){ (x){ x.f.ok } }

; (a -> Either b c) , (a -> Either b c) -> (a -> Either b c)
@def either := (l r){
    (value){ l(value).else({ r(value) }) }
}
@def both := (l r){
    (value){ l(value).then({ r(value) }) }
}
@def seq := (l r){
    (value){ l(value).then(r) }
}
; apply f until it fails
@def all := (f){
    (value){ f(value).cond(all(f) { ok(value) }) }
}

; a, [(a -> Either b c)] -> Either b c
@def match := (value fs){
    fs.fold(either never)(value)
}

BEGIN
