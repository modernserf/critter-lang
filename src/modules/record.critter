@module [#std/record
         options: [#bare-prelude]]

@import [::ok ::error ::== ::!=] := #std/result

@def get-key := (record key){
    key.JS::in(record)
       .JS::?(ok(record.JS::get(key)) error(#not-found))
}

; merge l and r into a single record, with r's fields taking precedence
@def merge := (l r){
    JS::apply(JS::Object::assign [[] l r])
}

; create a new record of [key: value]
@def key-value := (key value){
    JS::set-prop([] key value)
}

@def assoc := (record key value){
    record.merge(pair(key value))
}

@def record? := (r){
    @then ==(JS::typeof(r) #object)
    @then !=(r JS::null)
    ok(r)
}

@def fold := (xs init f){
    @let arr := JS::apply(JS::global::Object::values [xs])
    JS::apply(arr::reduce [JS::fn(f) init] this: arr)
}
